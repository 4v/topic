环境：IDEA、JDK1.8

1.File-New-Project-Empty Project，设定JDK版本
2.File-New-Module-Gradle-java&web
3.Run-Edit Configurations-Add-Tomcat Server-Deployment，选取新建的Module
4.运行一下，会出现src/main/webapp下的index.jsp页面内容

5.在src/main/webapp下新建WEB-INF文件夹，然后在该文件夹下新建classes
6.ctrl+alt+shift+S打开设置界面，找到Modules-Module名-paths，设定User module compile output path为新建的classes路径
7.同样修改test的路径同上

8.在src/main/java下建立项目开发结构，使用SpringMVC+Spring+Mybatis开发，包含并不仅限于controller、model、mapper、service
9.添加各种文件
10.IDEA中错误警报不能注入Bean时，Settings-Inspections-Spring-Spring Core-Code-Autowiring for Bean Class去除勾选

提交项目到Github

1.配置IDEA中的git
    Settings-Version Control-Git-Path to Git executable-选择你的安装目录
    test
2.配置github帐号密码
    Settings-Version Control-GitHub
    Host：github.com  Login:账号  Password：密码
    Test
3.创建本地仓库
    VCS-Import into Version Control-Create Git Repository
4.提交代码到本地Git
    右键项目或者文件 Git-Add-Commit （先add 然后再提交）
5.配置远程提交
    github上创建仓库，获取仓库地址：https://github.com/dingdongliang/topic.git
    Git Shell中配置远程仓库，或者cmd（要求配置环境变量），依次运行下面的命令
    cd 项目目录
    git remote add origin https://github.com/dingdongliang/topic.git
    git push -u origin master
6.普通提交
    右键项目或文件 Git-Commit File or Directory
    填写commit message，然后悬停在commit上选择commit and push即可
7.多人协作开发
    在Github 项目的 settings-Collaborators 下可以添加项目成员


示例代码类介绍

1.HTTP POST 上传文件示例：HttpPost.java，服务器端和接收表单提交一样处理
2.



配置web服务器：tomcat
1.Run-Edit Configurations-点击加号-tomcat server-local
2.application server-configure-添加本地tomcat
3.on 'Update' action:Update classes and resources
4.on frame deactivation:Update classes and resources
5.静态文件随改随变
6.修改完类文件shift+F9


团队开发需要注意的问题：
1.字符串判断是否为空要加入工具类，并且注意使用最有效率的判断方式
2.获取request提交的参数统一处理，并声明使用方式
3.

国际化

统计工具（百度统计）

使用IDEA的live template设置注释快捷方式

=======================================
1.不管什么用户登录，获取的都是system的权限，已解决。解决方法：退出时清除shiro的缓存
2.无穷级菜单设计，已解决。解决方法：使用递归生成菜单模型，缺陷：不适合于巨数量级菜单
TODO 3.权限选择时，不能点击复选框选择
TODO 4.后台页面加载的js统一化处理
TODO 5.封装request提交的数据，使用map直接提交到mybatis配置文件中使用
TODO 6.mybatis动态语句重写
TODO 7.表结构与名称重新设计，添加权限前缀并与实体类对应
TODO 8.EASYUI代码风格统一化整理，简化处理
TODO 9.EASYUI combobox内容去掉自身，不可编辑
TODO 10.输入框逐一核实是否必填
TODO 11.数据库表级联逻辑审核，比如组织挂靠与公司，如果某个公司删除了，要删除对应的组织记录
TODO 12.javascript 全局变量优化
TODO 13.控制器上也添加权限控制,类似:@RequiresPermissions({"compAdd", "compEdit"})
TODO 14.权限结构升级：公司-组织-岗位-角色-权限，特殊权限-用户
TODO 15.mybatis 存储过程，复杂查询使用
TODO 16.新加子菜单时，怎么同步权限问题，比如A菜单在角色A的权限范围内，A菜单添加子菜单A1，A1同步到角色A可用
TODO 17.SpringMVC 封装参数，使用实体类

数据库设计备忘：
1.基础表都有删除标记：status，D为deleted,U是used
2.全部表都有操作信息字段：creater创建者,editor编辑者,createTime和editTime，放在baseDomain父类里
